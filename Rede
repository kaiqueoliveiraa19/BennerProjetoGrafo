using System;
using System.Collections.Generic;

namespace Rede
{
    public class Rede
    {
        private readonly int qtdNo; // Quantidade de nós na rede
        private readonly List<List<int>> conexoes; // Lista de adjacência do grafo

        // Inicializa a rede com a quantidade de nós especificada
        public Rede(int qtdNo)
        {
            if (qtdNo <= 0)
                throw new ArgumentException("A quantidade de nos deve ser maior que zero.");

            this.qtdNo = qtdNo;
            conexoes = new List<List<int>>(qtdNo);
            for (int i = 0; i < qtdNo; i++)
                conexoes.Add(new List<int>());
        }

        // Adiciona uma conexão bidirecional entre dois nós
        public void Conectar(int no1, int no2)
        {
            ValidarNo(no1, no2);
            if (no1 == no2)
                throw new ArgumentException("Um no nao pode se conectar a si mesmo.");

            conexoes[no1 - 1].Add(no2 - 1);
            conexoes[no2 - 1].Add(no1 - 1);
        }

        // Remove uma conexão bidirecional entre dois nós
        public void Desconectar(int no1, int no2)
        {
            ValidarNo(no1, no2);
            conexoes[no1 - 1].Remove(no2 - 1);
            conexoes[no2 - 1].Remove(no1 - 1);
        }

        // Verifica se dois nós estão conectados (direta ou indiretamente)
        public bool EstaoConectados(int no1, int no2)
        {
            ValidarNo(no1, no2);
            if (no1 == no2)
                return true;

            var visitados = new bool[qtdNo];
            return BuscaEmProfundidade(no1 - 1, no2 - 1, visitados);
        }

        // Conta o número de conexões no menor caminho entre dois nós
        public int ContarConexoes(int no1, int no2)
        {
            ValidarNo(no1, no2);
            if (no1 == no2)
                return 0;

            var visitados = new bool[qtdNo];
            var fila = new Queue<(int no, int passos)>();
            fila.Enqueue((no1 - 1, 0)); // Adiciona o nó inicial à fila com 0 passos
            visitados[no1 - 1] = true;

            while (fila.Count > 0)
            {
                var (atual, passos) = fila.Dequeue(); // Remove o próximo nó da fila
                foreach (var vizinho in conexoes[atual])
                {
                    if (!visitados[vizinho])
                    {
                        if (vizinho == no2 - 1)
                            return passos + 1;
                        visitados[vizinho] = true;
                        fila.Enqueue((vizinho, passos + 1)); // Adiciona o vizinho à fila com passos incrementados
                    }
                }
            }
            return 0; // Não há caminho
        }

        // Valida se os nós estão no intervalo permitido
        private void ValidarNo(int no1, int no2)
        {
            if (no1 <= 0 || no1 > qtdNo || no2 <= 0 || no2 > qtdNo)
                throw new ArgumentException($"Os nos devem estar entre 1 e {qtdNo}.");
        }

        // Busca em profundidade para encontrar caminho entre dois nós
        private bool BuscaEmProfundidade(int atual, int destino, bool[] visitados)
        {
            visitados[atual] = true;
            if (atual == destino)
                return true;

            foreach (var vizinho in conexoes[atual])
            {
                if (!visitados[vizinho] && BuscaEmProfundidade(vizinho, destino, visitados))
                    return true;
            }
            return false;
        }
    }

    public class Program
    {
        public static void Main()
        {
            try
            {
                // Cria uma rede com 8 nós
                var rede = new Rede(8);

                // Estabelece conexões
                rede.Conectar(1, 2);
                rede.Conectar(6, 2);
                rede.Conectar(2, 4);
                rede.Conectar(5, 8);

                // Verifica conexões
                Console.WriteLine($"1 e 6 estao conectados? {rede.EstaoConectados(1, 6)}"); // True
                Console.WriteLine($"6 e 4 estao conectados? {rede.EstaoConectados(6, 4)}"); // True
                Console.WriteLine($"7 e 4 estao conectados? {rede.EstaoConectados(7, 4)}"); // False
                Console.WriteLine($"5 e 6 estao conectados? {rede.EstaoConectados(5, 6)}"); // False

                // Conta passos no menor caminho
                Console.WriteLine($"Passos entre 1 e 6: {rede.ContarConexoes(1, 6)}"); // 1
                Console.WriteLine($"Passos entre 6 e 4: {rede.ContarConexoes(6, 4)}"); // 1
                Console.WriteLine($"Passos entre 1 e 4: {rede.ContarConexoes(1, 4)}"); // 2
                Console.WriteLine($"Passos entre 7 e 4: {rede.ContarConexoes(7, 4)}"); // 0
                Console.WriteLine($"Passos entre 5 e 6: {rede.ContarConexoes(5, 6)}"); // 0

                // Testa desconexão
                rede.Desconectar(1, 2);
                Console.WriteLine($"Apos desconectar 1 e 2, 1 e 6 estao conectados? {rede.EstaoConectados(1, 6)}"); // False

                // Testa casos de erro
                try
                {
                    rede.Conectar(0, 1); // Nó inválido
                }
                catch (ArgumentException e)
                {
                    Console.WriteLine($"Erro: {e.Message}");
                }

                try
                {
                    rede.Conectar(1, 1); // Auto-conexão
                }
                catch (ArgumentException e)
                {
                    Console.WriteLine($"Erro: {e.Message}");
                }

                try
                {
                    var redeInvalida = new Rede(0); // Tamanho inválido
                }
                catch (ArgumentException e)
                {
                    Console.WriteLine($"Erro: {e.Message}");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"Erro: {e.Message}");
            }
        }
    }
}
